---
- name: Ensure device facts are gathered
  tags:
    - device_info
  become: true
  ansible.builtin.setup:
    gather_subset: devices

- name: Ensure device name list is generated
  tags:
    - device_info
  ansible.builtin.set_fact:
    _device_names: "{{ ansible_devices.keys() |
                       list |
                       default([]) }}"

- name: Ensure device partition list is generated
  tags:
    - device_info
  ansible.builtin.set_fact:
    _device_partitions: "{{ _device_partitions |
                            default([]) +
                            [{'name': _name,
                              'partitions': _part}] }}"
  loop: "{{ _device_names }}"
  loop_control:
    label: "{{ _name }}"
    loop_var: _name
  vars:
    _part: "{{ ansible_devices[_name]['partitions'].keys() |
               list |
               default([]) }}"

- name: Ensure device partition dictionaries are generated
  tags:
    - device_info
  ansible.builtin.set_fact:
    _device_part_sect: "{{ _device_part_sect |
                           default({}) |
                           combine({_part: _info.sectors}) }}"
    _device_part_size: "{{ _device_part_size |
                           default({}) |
                           combine({_part: _info.size}) }}"
    _device_part_uuid: "{{ _device_part_uuid |
                           default({}) |
                           combine({_part: _info.uuid}) }}"
  loop: "{{ q('ansible.builtin.subelements',
              _device_partitions,
              'partitions',
              {'skip_missing': true}) }}"
  loop_control:
    label: "{{ _part }}"
    loop_var: _device_info
  vars:
    _dev: "{{ _device_info.0.name | d(none) }}"
    _info: "{{ ansible_devices[_dev]['partitions'][_part] | d(none) }}"
    _part: "{{ _device_info.1 | d(none) }}"
  when:
    - _dev is not none
    - _info is not none
    - _part is not none
...
