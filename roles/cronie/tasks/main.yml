---
- name: Ensure cronie package is present
  tags:
    - cronie
  become: true
  ansible.builtin.dnf:
    name: cronie
    state: present

- name: Ensure cronie allow configuration is managed
  tags:
    - cronie
  become: true
  ansible.builtin.template:
    dest: /etc/cron.allow
    mode: '0600'
    src: cron.allow.j2

- name: Ensure cronie deny configuration is managed
  tags:
    - cronie
  become: true
  ansible.builtin.template:
    dest: /etc/cron.deny
    mode: '0600'
    src: cron.deny.j2

- name: Ensure cronie sysconfig configuration is managed
  tags:
    - cronie
  become: true
  ansible.builtin.template:
    dest: /etc/sysconfig/crond
    mode: '0644'
    src: cron.sysconfig.j2

- name: Ensure cronie jobs are managed
  tags:
    - cronie
  become: true
  ansible.builtin.cron:
    backup: "{{ _cron.0.backup | d(false) }}"
    cron_file: "{{ _cron.0.cron_file | d(omit) }}"
    day: "{{ _cron.1.day | d('*') }}"
    hour: "{{ _cron.1.hour | d('*') }}"
    insertafter: "{{ _cron.1.insertafter | d(omit) }}"
    insertbefore: "{{ _cron.1.insertbefore | d(omit) }}"
    job: "{{ _cron.1.job }}"
    minute: "{{ _cron.1.minute | d('*') }}"
    month: "{{ _cron.1.month | d('*') }}"
    name: "{{ _cron.1.name }}"
    special_time: "{{ _cron.1.special_time | d(omit) }}"
    state: present
    user: "{{ _cron.1.user }}"
    weekday: "{{ _cron.1.weekday | d('*') }}"
  notify:
    - Restart crond
  loop:
    "{{ q('ansible.builtin.subelements',
          cronie_jobs,
          'jobs',
          {'skip_missing': true}) }}"
  loop_control:
    label: "{{ _cron.0.cron_file | d(omit) }}"
    loop_var: _cron
  when:
    - _cron.0.cron_file is defined
    - _cron.1.job is defined
    - _cron.1.name is defined
    - _cron.1.user is defined

- name: Ensure cronie is started and enabled on boot
  tags:
    - cronie
  become: true
  ansible.builtin.service:
    enabled: true
    name: crond
    state: started
...
