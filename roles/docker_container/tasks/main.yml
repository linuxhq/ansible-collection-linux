---
- name: Ensure docker python packages are present
  tags:
    - docker_container
  become: true
  ansible.builtin.dnf:
    name: python3-requests
    state: present

- name: Ensure docker containers are managed
  tags:
    - docker_container
  community.docker.docker_container:
    api_version: "{{ _container.api_version | d('auto') }}"
    auto_remove: "{{ _container.auto_remove | d(false) }}"
    blkio_weight: "{{ _container.blkio_weight | d(omit) }}"
    cap_drop: "{{ _container.cap_drop | d([]) }}"
    capabilities: "{{ _container.capabilities | d([]) }}"
    cgroup_parent: "{{ _container.cgroup_parent | d(omit) }}"
    cgroupns_mode: "{{ _container.cgroupns_mode | d(omit) }}"
    cleanup: "{{ _container.cleanup | d(false) }}"
    command: "{{ _container.command | d(omit) }}"
    command_handling: "{{ _container.command_handling | d(omit) }}"
    comparisons: "{{ _container.comparisons | d(omit) }}"
    container_default_behavior: "{{ _container.container_default_behavior | d('no_defaults') }}"
    cpu_period: "{{ _container.cpu_period | d(omit) }}"
    cpu_quota: "{{ _container.cpu_quota | d(omit) }}"
    cpu_shares: "{{ _container.cpu_shares | d(omit) }}"
    cpus: "{{ _container.cpus | d(omit) }}"
    cpuset_cpus: "{{ _container.cpuset_cpus | d(omit) }}"
    cpuset_mems: "{{ _container.cpuset_mems | d(omit) }}"
    debug: "{{ _container.debug | d(false) }}"
    d_host_ip: "{{ _container.default_host_ip | d(omit) }}"
    detach: "{{ _container.detach | d(true) }}"
    device_read_bps: "{{ _container.device_read_bps | d([]) }}"
    device_read_iops: "{{ _container.device_read_iops | d([]) }}"
    device_requests: "{{ _container.device_requests | d([]) }}"
    device_write_bps: "{{ _container.device_write_bps | d([]) }}"
    device_write_iops: "{{ _container.device_write_iops | d([]) }}"
    devices: "{{ _container.devices | d([]) }}"
    dns_opts: "{{ _container.dns_opts | d([]) }}"
    dns_search_domains: "{{ _container.dns_search_domains | d([]) }}"
    dns_servers: "{{ _container.dns_servers | d([]) }}"
    docker_host: "{{ _container.docker_host | d('unix://var/run/docker.sock') }}"
    domainname: "{{ _container.domainname | d(omit) }}"
    entrypoint: "{{ _container.entrypoint | d([]) }}"
    env: "{{ _container.env | d({}) }}"
    env_file: "{{ _container.env_file | d(omit) }}"
    etc_hosts: "{{ _container.etc_hosts | d({}) }}"
    exposed_ports: "{{ _container.exposed_ports | d([]) }}"
    force_kill: "{{ _container.force_kill | d(false) }}"
    groups: "{{ _container.groups | d([]) }}"
    healthcheck: "{{ _container.healthcheck | d({}) }}"
    hostname: "{{ _container.hostname | d(omit) }}"
    image: "{{ _container.image }}"
    image_comparison: "{{ _container.image_comparison | d('desired-image') }}"
    image_label_mismatch: "{{ _container.image_label_mismatch | d('ignore') }}"
    image_name_mismatch: "{{ _container.image_name_mismatch | d('ignore') }}"
    init: "{{ _container.init | d(false) }}"
    interactive: "{{ _container.interactive | d(false) }}"
    ipc_mode: "{{ _container.ipc_mode | d(omit) }}"
    keep_volumes: "{{ _container.keep_volumes | d(true) }}"
    kernel_memory: "{{ _container.kernel_memory | d(omit) }}"
    kill_signal: "{{ _container.kill_signal | d(omit) }}"
    labels: "{{ _container.labels | d({}) }}"
    links: "{{ _container.links | d([]) }}"
    log_driver: "{{ _container.log_driver | d('json-file') }}"
    log_options: "{{ _container.log_options | d({}) }}"
    mac_address: "{{ _container.mac_address | d(omit) }}"
    memory: "{{ _container.memory | d(0) }}"
    memory_reservation: "{{ _container.memory_reservation | d(omit) }}"
    memory_swap: "{{ _container.memory_swap | d(omit) }}"
    memory_swappiness: "{{ _container.memory_swappiness | d(omit) }}"
    mounts: "{{ _container.mounts | d([]) }}"
    name: "{{ _container.name }}"
    network_mode: "{{ _container.network_mode | d(omit) }}"
    networks: "{{ _container.networks | d([]) }}"
    networks_cli_compatible: "{{ _container.networks_cli_compatible | d(true) }}"
    oom_killer: "{{ _container.oom_killer | d(omit) }}"
    oom_score_adj: "{{ _container.oom_score_adj | d(omit) }}"
    output_logs: "{{ _container.output_logs | d(false) }}"
    paused: "{{ _container.paused | d(false) }}"
    pid_mode: "{{ _container.pid_mode | d(omit) }}"
    pids_limit: "{{ _container.pids_limit | d(omit) }}"
    platform: "{{ _container.platform | d(omit) }}"
    privileged: "{{ _container.privileged | d(false) }}"
    publish_all_ports: "{{ _container.publish_all_ports | d(omit) }}"
    published_ports: "{{ _container.published_ports | d([]) }}"
    pull: "{{ _container.pull | d(false) }}"
    read_only: "{{ _container.read_only | d(false) }}"
    recreate: "{{ _container.recreate | d(false) }}"
    removal_wait_timeout: "{{ _container.removal_wait_timeout | d(omit) }}"
    restart: "{{ _container.restart | d(false) }}"
    restart_policy: "{{ _container.restart_policy | d(omit) }}"
    restart_retries: "{{ _container.restart_retries | d(omit) }}"
    runtime: "{{ _container.runtime | d(omit) }}"
    security_opts: "{{ _container.security_opts | d([]) }}"
    shm_size: "{{ _container.shm_size | d(omit) }}"
    ssl_version: "{{ _container.ssl_version | d(omit) }}"
    state: "{{ _container.state | d('started') }}"
    stop_signal: "{{ _container.stop_signal | d(omit) }}"
    stop_timeout: "{{ _container.stop_timeout | d(omit) }}"
    storage_opts: "{{ _container.storage_opts | d({}) }}"
    sysctls: "{{ _container.sysctls | d({}) }}"
    timeout: "{{ _container.timeout | d(60) }}"
    tls: "{{ _container.tls | d(false) }}"
    tls_hostname: "{{ _container.tls_hostname | d(omit) }}"
    tmpfs: "{{ _container.tmpfs | d([]) }}"
    tty: "{{ _container.tty | d(false) }}"
    ulimits: "{{ _container.ulimits | d(omit) }}"
    use_ssh_client: "{{ _container.use_ssh_client | d(false) }}"
    user: "{{ _container.user | d(omit) }}"
    userns_mode: "{{ _container.userns_mode | d(omit) }}"
    uts: "{{ _container.uts | d(omit) }}"
    validate_certs: "{{ _container.validate_certs | d(false) }}"
    volume_driver: "{{ _container.volume_driver | d(omit) }}"
    volumes: "{{ _container.volumes | d([]) }}"
    volumes_from: "{{ _container.volumes_from | d([]) }}"
    working_dir: "{{ _container.working_dir | d(omit) }}"
  loop: "{{ docker_container_list }}"
  loop_control:
    label: "{{ _container.name | d(none) }}"
    loop_var: _container
  when:
    - _container.image is defined
    - _container.name is defined
...
